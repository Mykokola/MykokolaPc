{"version":3,"file":"bundle.js","mappings":"mBAGAA,OAAOC,iBAAiB,oBAAoB,MCH5C,SAAeC,EAAGC,GAed,SAASC,EAAQC,GAKb,OAJAA,EAAOC,OAAOD,IACNE,OAAS,IACbF,EAAO,IAAMA,GAEVA,CACX,EACA,SAAkBG,EAAUL,GACVM,SAASC,cAAcF,GAArC,MACAG,EAAOF,SAASC,cAAc,SAC9BE,EAAQH,SAASC,cAAc,UAC/BG,EAAUJ,SAASC,cAAc,YACjCI,EAAUL,SAASC,cAAc,YACjCK,EAAeC,YAAYC,EAAY,KAGvC,SAASA,IACL,MAAMC,EA/Bd,SAA0Bf,GACtB,MAAMe,EAAIC,KAAKC,MAAMjB,GAAWgB,KAAKC,MAAM,IAAID,MAK/C,MAAO,CACH,MAASD,EACT,KANGG,KAAKC,MAAMJ,EAAG,OAOjB,MANIG,KAAKC,MAAMJ,EAAI,KAAmB,IAOtC,QANMG,KAAKC,MAAOJ,EAAI,IAAO,GAAM,IAOnC,QANMG,KAAKC,MAAOJ,EAAI,IAAQ,IAQtC,CAkBkBK,CAAiBpB,GAE3BQ,EAAKa,UAAYpB,EAAQc,EAAEP,MAC3BC,EAAMY,UAAYpB,EAAQc,EAAEN,OAC5BC,EAAQW,UAAYpB,EAAQc,EAAEL,SAC9BC,EAAQU,UAAYpB,EAAQc,EAAEJ,SAC3BI,EAAEO,OAAQ,GACTC,cAAcX,EAEtB,CAZAE,GAaJ,CACJU,CAASzB,EAAGC,EACZ,EDxCI,CAAM,SAAS,cEUGM,SAASmB,iBAAiB,eAClCC,SAAQC,KAPlB,SAAyBC,EAAYC,GACjC,MAAMC,EAAcxB,SAASC,cAOb,UANhBsB,EAAO/B,iBAAiB,SAAQ,KAC5BgC,EAAYC,MAAMC,QAAU,UAEpC,CAGIC,CAAgB,EAASN,EAAI,IAfjC,SAA0BO,EAASN,GAC/B,MAAMO,EAAa7B,SAASC,cAgBf,iBAfPuB,EAAcxB,SAASC,cAeA,UAd7B4B,EAAWrC,iBAAiB,SAAQ,KAChCgC,EAAYC,MAAMC,QAAU,SAEpC,CAWAI,GCjBc9B,SAASmB,iBAAiB,QAClCC,SAAQC,IAcd,IAAsBU,KAbLV,GAcR7B,iBAAiB,UAAWwC,IAC7BA,EAAEC,iBACF,MAAMC,EAAW,IAAIC,SAASJ,GAdrBK,OAAOC,EAAKC,KACzB,IAAIC,QAAYC,MAeH,iCAfc,CACvBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAML,IAGV,aAAaC,EAAIK,MAAM,EAOnBC,CAAS,EADIC,KAAKC,UAAUC,OAAOC,YAAYf,EAASgB,aAEvDC,MAAKb,IACFc,QAAQC,IAAIf,EAAK,IAClBgB,OAAM,KACNF,QAAQC,IAAIE,MAAK,IACjBC,SAAQ,KACPzB,EAAK0B,OAAO,GAEd,GA1BY,GHGR,G","sources":["webpack://gitprogect/./script.js","webpack://gitprogect/./modules/timer.js","webpack://gitprogect/./modules/switherWindowModal.js","webpack://gitprogect/./modules/postDb.js"],"sourcesContent":["import timer from './modules/timer';\r\nimport switchModal from './modules/switherWindowModal'\r\nimport senMasageJson from './modules/postDb'\r\nwindow.addEventListener('DOMContentLoaded', () => { \r\n    timer('.timer','2022-12-11')\r\n    switchModal()\r\n    senMasageJson()\r\n})","function timer(id,endtime){\r\n    function getTimeRemaining(endtime){\r\n        const t = Date.parse(endtime) - Date.parse(new Date()),\r\n        days = Math.floor(t/ (1000 * 60 * 60 * 24)),\r\n        hours = Math.floor(t / (1000 * 60 * 60) % 24),\r\n        minutes = Math.floor((t / 1000 * 60) % 60),\r\n        seconds = Math.floor((t / 1000) % 60)\r\n        return {\r\n            'total': t,\r\n            'days' : days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        }\r\n    }\r\n    function getZero(numb){ \r\n        numb = String(numb)\r\n        if(numb.length < 2){\r\n            numb = '0' + numb\r\n        }\r\n        return numb\r\n    }\r\n    function setClock(selector, endtime){\r\n        const timer = document.querySelector(selector),\r\n        days = document.querySelector('#days'),\r\n        hours = document.querySelector('#hours'),\r\n        minutes = document.querySelector('#minutes'),\r\n        seconds = document.querySelector('#seconds'),\r\n        timeInterval = setInterval(updateClock,1000);\r\n        updateClock()\r\n\r\n        function updateClock(){\r\n            const t = getTimeRemaining(endtime)\r\n\r\n            days.innerHTML = getZero(t.days)\r\n            hours.innerHTML = getZero(t.hours)\r\n            minutes.innerHTML = getZero(t.minutes)\r\n            seconds.innerHTML = getZero(t.seconds)\r\n            if(t.total <=0){\r\n                clearInterval(timeInterval)\r\n            }\r\n        }\r\n    }\r\nsetClock(id,endtime)    \r\n}\r\nexport default timer","   function switchModal(){\r\n    function closeModalWindow(switcher,windowModal){\r\n        const closeModal = document.querySelector(switcher)\r\n        const modalWindow = document.querySelector(windowModal)\r\n        closeModal.addEventListener(\"click\",()  => {\r\n            modalWindow.style.display = \"none\"\r\n        })\r\n    }\r\n    function showModalWindow(windowModal,itmBtn){\r\n        const modalWindow = document.querySelector(windowModal)\r\n        itmBtn.addEventListener('click',() => {\r\n            modalWindow.style.display = \"block\"\r\n        })\r\n    }\r\n    const showModal = document.querySelectorAll('.book-curse')\r\n    showModal.forEach(item => {\r\n        showModalWindow(\".modal\",item)\r\n    })\r\n    closeModalWindow('.modal__close','.modal')\r\n}\r\nexport default switchModal","function senMasageJson(){\r\n    const forms = document.querySelectorAll('form');\r\n    forms.forEach(item => {\r\n        bindPostData(item);\r\n    });\r\n    const postData = async (url, data) => {\r\n        let res = await fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: data\r\n        });\r\n    \r\n        return await res.json();\r\n    };\r\n    function bindPostData(form) {\r\n        form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            const formData = new FormData(form);\r\n            const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n            postData('http://localhost:3000/requests', json)\r\n            .then(data => {\r\n                console.log(data);\r\n            }).catch(() => {\r\n               console.log(Error)\r\n            }).finally(() => {\r\n                form.reset();\r\n                \r\n            });\r\n        });\r\n    }\r\n}\r\nexport default senMasageJson"],"names":["window","addEventListener","id","endtime","getZero","numb","String","length","selector","document","querySelector","days","hours","minutes","seconds","timeInterval","setInterval","updateClock","t","Date","parse","Math","floor","getTimeRemaining","innerHTML","total","clearInterval","setClock","querySelectorAll","forEach","item","windowModal","itmBtn","modalWindow","style","display","showModalWindow","switcher","closeModal","closeModalWindow","form","e","preventDefault","formData","FormData","async","url","data","res","fetch","method","headers","body","json","postData","JSON","stringify","Object","fromEntries","entries","then","console","log","catch","Error","finally","reset"],"sourceRoot":""}